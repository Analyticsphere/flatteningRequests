CREATE TEMP FUNCTION
  handleRow(input_row STRING)
  RETURNS STRING
  LANGUAGE js AS r"""

  function getNestedObjectValue(obj, pathString) {
    function getNestedObjectValueFromPathArray(obj, pathArray) {
      let currKey = pathArray[0];
      if (
        typeof obj[currKey] === 'undefined' || obj[currKey] === null ||
        pathArray.length === 1
      )
        return obj[currKey];

      return getNestedObjectValueFromPathArray(obj[currKey], pathArray.slice(1));
    }

    return getNestedObjectValueFromPathArray(obj, pathString.split('.'));
  }

  function setNestedObjectValue(obj, pathString, value) {
    function setNestedObjectValueFromPathArray(obj, pathArray, value) {
      let currKey = pathArray[0];

      if (pathArray.length === 1) {
        obj[currKey] = value;
        return;
      }

      if (
        typeof obj[currKey] === 'undefined' ||
        typeof obj[currKey] !== 'object'
      ) {
        obj[currKey] = {};
      }

      return setNestedObjectValueFromPathArray(
        obj[currKey],
        pathArray.slice(1),
        value
      );
    }
    return setNestedObjectValueFromPathArray(obj, pathString.split('.'), value);
  }

  const arraysToBeFlattened={}

  function handleRowJS(row) {
    for (let arrPath of Object.keys(arraysToBeFlattened)) {
      let currObj = {};
      let inputConceptIdList = getNestedObjectValue(row, arrPath);
      if (!inputConceptIdList || inputConceptIdList.length === 0) continue;
      inputConceptIdList = inputConceptIdList.map(v => +v);

      for (let cid of arraysToBeFlattened[arrPath]) {
        if (inputConceptIdList.indexOf(cid) >= 0) {
          currObj['D_' + cid] = 1;
        } else currObj['D_' + cid] = 0;
      }

      setNestedObjectValue(row, arrPath, currObj);
    }
    return JSON.stringify(row);
  }

  const row = JSON.parse(input_row);
  return handleRowJS(row);

""";

  CREATE OR REPLACE TABLE Biospecimens.flatBiospecimen_JP AS (
  WITH
  json_data AS (
    SELECT
      Connect_ID,
      [handleRow(TO_JSON_STRING(input_row))] AS body
    FROM
      `nih-nci-dceg-connect-stg-5519.Connect.biospecimen` AS input_row where Connect_ID is not null
  ),
  flattened_data AS (
    SELECT
      Connect_ID,
      REPLACE(JSON_QUERY(row,'$.d_139245758'), '\"', '') AS d_139245758,
REPLACE(JSON_QUERY(row,'$.d_198261154'), '\"', '') AS d_198261154,
REPLACE(JSON_QUERY(row,'$.d_210921343'), '\"', '') AS d_210921343,
REPLACE(JSON_QUERY(row,'$.d_224596428'), '\"', '') AS d_224596428,
REPLACE(JSON_QUERY(row,'$.d_341570479'), '\"', '') AS d_341570479,
REPLACE(JSON_QUERY(row,'$.d_398645039'), '\"', '') AS d_398645039,
REPLACE(JSON_QUERY(row,'$.d_453452655'), '\"', '') AS d_453452655,
REPLACE(JSON_QUERY(row,'$.d_530173840'), '\"', '') AS d_530173840,
REPLACE(JSON_QUERY(row,'$.d_534041351'), '\"', '') AS d_534041351,
REPLACE(JSON_QUERY(row,'$.d_541311218'), '\"', '') AS d_541311218,
REPLACE(JSON_QUERY(row,'$.d_611091485'), '\"', '') AS d_611091485,
REPLACE(JSON_QUERY(row,'$.d_646899796'), '\"', '') AS d_646899796,
REPLACE(JSON_QUERY(row,'$.d_693370086'), '\"', '') AS d_693370086,
REPLACE(JSON_QUERY(row,'$.d_728696253'), '\"', '') AS d_728696253,
REPLACE(JSON_QUERY(row,'$.d_769615780'), '\"', '') AS d_769615780,
REPLACE(JSON_QUERY(row,'$.d_786930107'), '\"', '') AS d_786930107,
REPLACE(JSON_QUERY(row,'$.d_822274939'), '\"', '') AS d_822274939,
REPLACE(JSON_QUERY(row,'$.d_860477844'), '\"', '') AS d_860477844,
REPLACE(JSON_QUERY(row,'$.d_939818935'), '\"', '') AS d_939818935,
REPLACE(JSON_QUERY(row,'$.d_982213346'), '\"', '') AS d_982213346
    from json_data, UNNEST(body) as row
  )

SELECT *, FORMAT_TIMESTAMP("%Y%m%d", DATETIME(CURRENT_TIMESTAMP(), "America/New_York")) AS date
FROM flattened_data
WHERE d_646899796 IS NOT NULL
ORDER BY Connect_ID
)